services:
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: platform_app
    env_file:
      - .env-docker-pg

    ports:
      - "${SERVER_PORT:-8080}:8080"
      - "${GRPC_PORT:-50051}:50051"
    depends_on:
      - postgres
      - redis
      - minio
      - nats
      - otel-collector
    networks:
      - platform_network
    profiles:
      - test


  postgres:
    image: postgres:15-alpine
    container_name: platform_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-go_platform}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - platform_network

  redis:
    image: redis:7.2-alpine
    command: redis-server --appendonly no --save "" --requirepass ""  
    container_name: platform_redis
    environment:
      REDIS_ZONE_ID: "25"
      REDIS_PORT: "6379"
    ports:
      - "6379:6379"
    networks:
      - platform_network

  minio:
    image: quay.io/minio/minio
    container_name: platform_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9002:9000"
      - "9003:9001"
    networks:
      - platform_network

  nats:
    image: nats:2.10-alpine
    container_name: platform_nats
    ports:
      - "${NATS_PORT:-4222}:4222"
      - "${NATS_MONITOR_PORT:-8222}:8222"
    command: ["-m", "8222", "-js"]
    networks:
      - platform_network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: platform_otel_collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ../infra/otel-collector/config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
    depends_on:
      - tempo
    networks:
      - platform_network

  # Grafana Tempo (Trace storage)
  tempo:
    image: grafana/tempo:latest
    container_name: platform_tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ../infra/tempo/config.yaml:/etc/tempo.yaml
      - tempo_data:/var/tempo
    ports:
      - "3200:3200"   # Tempo HTTP
      - "9095:9095"   # Tempo gRPC
    networks:
      - platform_network

  # Grafana (UI for traces)
  grafana:
    image: grafana/grafana:latest
    container_name: platform_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../infra/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ../infra/grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ../infra/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - tempo
    networks:
      - platform_network

  # Prometheus (for metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: platform_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../infra/prometheus/scrape_config.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - platform_network

volumes:
  postgres_data:
  redis_data:
  tempo_data:
  grafana_data:
  prometheus_data:

networks:
  platform_network:
    driver: bridge
